// this function is called when the form is submitted <form onsubmit="calculate();">
const calculate = () => {
  const value = document.querySelector("#numbers").value; // to find the number that was entered in the #numbers input field
  const array = value.split(/,\s*/g); // you need to split it into an array of numbers. The .split() method takes a string and splits it into an array of strings. You can pass it a string of characters or a RegEx to use as a separator. For example, string.split(",") would split the string at each comma and return an array of strings. Use the /,\s*/g regex to split the value string by commas. You can tweak it based on the number of spaces separating your values.
  const numbers = array.map((el) => Number(el)).filter((el) => !isNaN(el)); // The value of an input element is always a string, even if the input type is number. You need to convert this array of strings into an array of numbers. To do this, you can use the .map() method. Remember that .map() creates a new array, instead of mutating the original array. // The .map() method takes a callback function as its first argument. This callback function takes a few arguments, but the first one is the current element being processed. The callback function needs to return a value. In this case, you want to return the value of each element converted to a number. You can do this by using the Number() constructor, passing the element as an argument.
  // const filtered = numbers.filter((el) => !isNaN(el)); // chained together to perform multiple operations at once.
  // A user could put any text they want into the input box. You want to make sure that you are only working with numbers. The Number() constructor will return NaN (which stands for "not a number") if the value passed to it cannot be converted to a number. You need to filter these values out â€“ thankfully, arrays have a method specifically for this. The .filter() method will allow you to filter elements out of an array, creating a new array in the process.
  // Much like the .map() method, the .filter() method takes a callback function. The callback function takes the current element as its first argument. The callback function needs to return a Boolean value, which indicates whether the element should be included in the new array. In this case, you want to return true if the element is not NaN (not a number). However, you cannot check for equality here, because NaN is not equal to itself. Instead, you can use the isNaN() method, which returns true if the argument is NaN.
  // Array methods can often be chained together to perform multiple operations at once.
};
